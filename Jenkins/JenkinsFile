node {
    def GITREPO         = "/var/lib/jenkins/workspace/${env.JOB_NAME}"
    def GITREPOREMOTE   = "https://github.com/yangwang166/cicd-databricks.git"
    def GITHUBCREDID    = "gittoken"
    def CURRENTRELEASE  = "master"
    def DBTOKEN         = "demotoken"
    def DBURL           = "https://adb-8405830731420074.14.azuredatabricks.net"
    def SCRIPTPATH      = "${GITREPO}/cicd-scripts"
    def NOTEBOOKPATH    = "${GITREPO}/notebooks"
    def LIBRARYPATH     = "${GITREPO}/libraries"
    def BUILDPATH       = "${GITREPO}/Builds/${env.JOB_NAME}-${env.BUILD_NUMBER}"
    def OUTFILEPATH     = "${BUILDPATH}/logs/Output"
    def TESTRESULTPATH  = "${BUILDPATH}/logs/reports/junit"
    def WORKSPACEPATH   = "/Shared/CICDETL"
    def DBFSPATH        = "dbfs:/Libs/python"
    def CLUSTERID       = "1215-231833-rush498"
    def CONDAPATH       = "/root/anaconda3"
    def CONDAENV        = "tempenv"
    def SLACKURL        = "https://hooks.slack.com/services/---/---/---"
    def SLACKCHANNEL    = "#cicd"

    stage('Setup') {
        //cleanWs()
        echo "======================Setup=============================="
        withCredentials([string(credentialsId: DBTOKEN, variable: 'TOKEN')]) {

            sh """#!/bin/bash
                  
                  rm -rf ./*
                  
                  wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -nv -O miniconda.sh
                  bash miniconda.sh -b -p $WORKSPACE/miniconda

                  source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                  
                  conda config --set always_yes yes --set changeps1 no
                  conda update -q conda

                  conda create --name ${CONDAENV}  python=3.8
                  
                  conda activate ${CONDAENV} 
                  
                  pip install requests databricks-connect databricks-cli pytest
                  
                  # Configure Databricks CLI for deployment
                  #echo "${DBURL}
                  #$TOKEN" | databricks configure --token
                  
                  #databricks -v
                  
                  # Configure Databricks Connect for testing
                  #echo "${DBURL}
                  #$TOKEN
                  #${CLUSTERID}
                  #8405830731420074
                  #15001" | databricks-connect configure
                  
                  #databricks-connect -h
               """
        }
    }
    stage('Checkout') { // for display purposes
        echo "======================Checkout=============================="
        echo "Pulling ${CURRENTRELEASE} Branch from Github"
        git branch: CURRENTRELEASE, credentialsId: GITHUBCREDID, url: GITREPOREMOTE
    }
    stage('Run Unit Tests') {
        echo "======================Run Unit Tests=============================="
        try {
            sh """#!/bin/bash
            
                  source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                  conda activate ${CONDAENV} 
                  
                  # Python Tests for Libs
                  python -m pytest --junit-xml=${TESTRESULTPATH}/TEST-libout.xml ${LIBRARYPATH}/python/dbxdemo/test*.py || true
                  
                  echo "Run Unit Tests Finished"
               """           
        } catch(err) {
          step([$class: 'JUnitResultArchiver', testResults: '--junit-xml=${TESTRESULTPATH}/TEST-*.xml'])
          if (currentBuild.result == 'UNSTABLE')
            currentBuild.result = 'FAILURE'
          throw err
        }
    }
    stage('Package') {
        echo "======================Package=============================="
        sh """#!/bin/bash
        
              source $WORKSPACE/miniconda/etc/profile.d/conda.sh
              
              conda activate ${CONDAENV}
              
              # Package Python Library to Wheel
              cd ${LIBRARYPATH}/python/dbxdemo
              python setup.py sdist bdist_wheel
           """            
    }    
    stage('Build Artifact') {
        echo "======================Build Artifact=============================="
        sh """mkdir -p ${BUILDPATH}/Workspace
              mkdir -p ${BUILDPATH}/Libraries/python
              mkdir -p ${BUILDPATH}/Validation/Output
              #Get Modified Files
              git diff --name-only --diff-filter=AMR HEAD^1 HEAD | xargs -I '{}' cp --parents -r '{}' ${BUILDPATH}
        
              # Get Packaged Libs
              find ${LIBRARYPATH} -name '*.whl' | xargs -I '{}' cp '{}' ${BUILDPATH}/Libraries/python/
        
              # Generate Artifact
              tar -czvf Builds/latest_build.tar.gz ${BUILDPATH}
           """
        archiveArtifacts artifacts: 'Builds/latest_build.tar.gz'
    }
    stage('Deploy') {
        echo "======================Deploy=============================="
        sh """#!/bin/bash
              source $WORKSPACE/miniconda/etc/profile.d/conda.sh
              conda activate ${CONDAENV} 
              
              # Use Databricks CLI to deploy Notebooks
              databricks workspace import_dir ${NOTEBOOKPATH} ${WORKSPACEPATH}
              
              dbfs cp -r ${BUILDPATH}/Libraries/python ${DBFSPATH}
           """  
        withCredentials([string(credentialsId: DBTOKEN, variable: 'TOKEN')]) {
           sh """#!/bin/bash
                
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                conda activate ${CONDAENV} 
                
                #Get space delimited list of libraries
                LIBS=${BUILDPATH}/Libraries/python
                     
                #Script to uninstall, reboot if needed & instsall library
                python ${SCRIPTPATH}/installWhlLibrary.py --shard=${DBURL}\
                    --token=$TOKEN\
                    --clusterid=${CLUSTERID}\
                    --libs=\$LIBS\
                    --dbfspath=${DBFSPATH}
              """
        }
    }
    stage('Run Integration Tests') {
        echo "======================Run Integration Tests=============================="
        withCredentials([string(credentialsId: DBTOKEN, variable: 'TOKEN')]) {
            sh """
                source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                
                conda activate ${CONDAENV} 
                
                mkdir -p ${OUTFILEPATH}
                
                python ${SCRIPTPATH}/executenotebook.py --shard=${DBURL}\
                            --token=$TOKEN\
                            --clusterid=${CLUSTERID}\
                            --localpath=${NOTEBOOKPATH}\
                            --workspacepath=${WORKSPACEPATH}\
                            --outfilepath=${OUTFILEPATH}
               """
        }
        sh """sed -i -e 's #ENV# ${OUTFILEPATH} g' ${SCRIPTPATH}/evaluatenotebookruns.py
              
              source $WORKSPACE/miniconda/etc/profile.d/conda.sh
              conda activate ${CONDAENV} 
              
              python -m pytest --junit-xml=${TESTRESULTPATH}/TEST-notebookout.xml ${SCRIPTPATH}/evaluatenotebookruns.py || true
           """
    }
    stage('Report Test Results') {
        echo "======================Report Test Result=============================="
        junit "**/reports/junit/*.xml"
        
    }
    stage('Send Notifications') {
        echo "======================Send Notifications=============================="
        sh """
            source $WORKSPACE/miniconda/etc/profile.d/conda.sh
            conda activate ${CONDAENV} 
            
            python ${SCRIPTPATH}/notify.py --slackurl=${SLACKURL}\
                            --message='${env.JOB_NAME}:Build-${env.BUILD_NUMBER}'\
                            --channel=${SLACKCHANNEL}\
                            --outputpath=${OUTFILEPATH}
           """
    }
}
